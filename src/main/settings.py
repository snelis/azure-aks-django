"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import logging
import os
import socket
from distutils.util import strtobool as distutils_strtobool
from pathlib import Path

from azure.identity import CredentialUnavailableError, ManagedIdentityCredential

# get an instance of a logger
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def strtobool(val):
    """Convert a string representation of truth to True or False.

    We extend distutils.util.strtobool because that implementation,
    despite its name, returns ints instead of bools.

    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values
    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if
    'val' is anything else.
    """
    return bool(distutils_strtobool(val))


def get_list_from_env(var_name):
    env_value = os.getenv(var_name)
    if env_value is None:
        return []

    env_settings = [value.strip() for value in env_value.split(',') if value]
    if env_settings:
        return env_settings
    return []


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = strtobool(os.getenv('DEBUG', 'false'))

ALLOWED_HOSTS = ['*']
INTERNAL_IPS = (
    '127.0.0.1',
    '0.0.0.0',
)
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
INTERNAL_IPS = [ip[:-1] + '1' for ip in ips] + ['127.0.0.1', '10.0.2.2']

SHELL_PLUS_PRINT_SQL = True
SHELL_PLUS_PRINT_SQL_TRUNCATE = 10_000


CORS_ALLOW_CREDENTIALS = strtobool(os.getenv('CORS_ALLOW_CREDENTIALS', 'false'))
CORS_ORIGIN_REGEX_WHITELIST = get_list_from_env('CORS_ORIGIN_REGEX_WHITELIST')
CORS_DEFAULT_ALLOWED_ORIGIN = os.environ['CORS_DEFAULT_ALLOWED_ORIGIN']
CORS_EXPOSE_HEADERS = [
    'Cache-Control',
    'Content-Language',
    'Content-Length',
    'Content-Type',
    'Expires',
    'Last-Modified',
    'Pragma',
    'x-csrftoken',
    'X-Session-Expires',
]

# Application definition

INSTALLED_APPS = [
    # Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # external apps
    'django_extensions',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'django_filters',
    # Internal Apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'
BASE_URL = os.getenv('BASE_URL', '/')
FORCE_SCRIPT_NAME = BASE_URL

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

SESSION_COOKIE_AGE = 60 * 60
SESSION_COOKIE_SECURE = strtobool(os.getenv('SESSION_COOKIE_SECURE', 'false'))
SESSION_COOKIE_DOMAIN = os.getenv('SESSION_COOKIE_DOMAIN')
SESSION_COOKIE_SAMESITE = os.getenv('SESSION_COOKIE_SAMESITE', 'Lax') or None
SESSION_HEADER_EXPIRE_NAME = 'X_Session_Expires'
SESSION_SAVE_EVERY_REQUEST = True

SECURE_HSTS_SECONDS = os.getenv('SECURE_HSTS_SECONDS', 0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = strtobool(
    os.getenv('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'false')
)
SECURE_HSTS_PRELOAD = strtobool(os.getenv('SECURE_HSTS_PRELOAD', 'false'))

SECURE_REFERRER_POLICY = os.getenv('SECURE_REFERRER_POLICY')
SECURE_SSL_REDIRECT = strtobool(os.getenv('SECURE_SSL_REDIRECT', 'false'))


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


class DBPassword:

    SCOPES = ['https://ossrdbms-aad.database.windows.net']

    def __str__(self):
        managed_identity = ManagedIdentityCredential()
        try:
            token = managed_identity.get_token(*self.SCOPES)
            return token.token
        except CredentialUnavailableError as e:
            logger.error(e)
            return None

        return 'dev'


DATABASES = {
    'default': {
        'ENGINE': os.getenv(
            'DATABASE_ENGINE', 'django.contrib.gis.db.backends.postgis'
        ),
        'NAME': os.getenv('DATABASE_NAME', 'dev'),
        'USER': os.getenv('DATABASE_USER', 'dev'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', DBPassword()),
        'HOST': os.getenv('DATABASE_HOST', 'database'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
        'CONN_MAX_AGE': int(os.getenv('DATABASE_CONN_MAX_AGE', 20)),
        'OPTIONS': {'sslmode': 'require'},
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_URL = os.path.join(BASE_URL, 'static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
